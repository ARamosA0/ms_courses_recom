version: "3.4"
services:
  
  #EventBroker con kafka
  #Zookeeper
  # zookeeper:
  #   image: wurstmeister/zookeeper:latest
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     KAFKA_ADVERTISED_LISTENERS: INSIDE://zookeeper:2181,OUTSIDE://localhost:2181
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
  #     KAFKA_LISTENERS: INSIDE://0.0.0.0:2181,OUTSIDE://0.0.0.0:9092
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #
  # kafka:
  #   image: wurstmeister/kafka:latest
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
  #     KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9092
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   depends_on:
  #     - zookeeper

  #zookeeper:
  #  image: confluentinc/cp-zookeeper
  #  environment:
  #    ZOOKEEPER_CLIENT_PORT: 2181
  #    ZOOKEEPER_TICK_TIME: 2000
  #  ports:
  #    - 22181:2181
  
  #kafka:
  #  image: confluentinc/cp-kafka  
  #  depends_on:
  #    - zookeeper
  #  ports:
  #    - 29092:29092
  #  environment:
  #    KAFKA_BROKER_ID: 1
  #    KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #    KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
  #    KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #    KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #    KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  #APIGATEWAY en Express.js
  #puerto 9090
  #apigateway:
  #  build: ./api_gateway
  #  depends_on:
  #    - kafka
  #  volumes:
  #    - ./api_gateway:/usr/local/app
  #  ports:
  #    - "9090:9090"
  #  environment:
  #    KAFKA_BROKER: kafka:9092
  #  networks:
    #  - frontend
    #  - back-process
  #    - back-tier-cursos
  #    - back-tier-usuarios

  # Frontend en React y vite
  # puerto 3000
  #frontend:
  #  build: ./frontend
  #  ports: 
  #    - "3000:3000"
  #  volumes:
  #    - ./frontend:/frontend
  #    - exclude:/frontend/node_modules/
  #  networks:
  #      - frontend

  #SERVICIO para recolectar data del EventBroker
  #y guardarla en REDIS para su procesado
  #en dotnet
  #collect:
  #  build: ./collect
  #  depends_on:
  #    - kafka
  #    - apigateway
  #  volumes:
  #    - ./collect:/usr/local/app
  #  environment:
  #    KAFKA_BROKER: kafka:9092
  #  networks:
  #      - back-process

  #SERVICIO para el procesamiento de data
  #en python
  #puerto 5000
  #procesing:
  #  build: 
  #    context: ./procesing
  #  depends_on:
  #    - kafka
  #    - apigateway
  #  healthcheck: 
  #    test: ["CMD", "curl", "-f", "http://localhost"]
  #    interval: 15s
  #    timeout: 5s
  #    retries: 3
  #    start_period: 10s
  #  ports:
  #    - "5000:80"
  #  environment:
  #    KAFKA_BROKER: kafka:9092
  #  volumes:
  #    - ./procesing:/procesing
  #  networks:
  #    - back-process

  #SERVICIO para crud de cursos 
  #en python
  #puerto 5001
  cursos:
    build: 
      context: ./cursos
    depends_on:
  #    - kafka
  #    - apigateway
      - db-cursos
    healthcheck: 
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    ports:
      - "5001:81"
    environment:
      KAFKA_BROKER: kafka:9092
      DATABASE_URL: postgresql://postgres-cursos:postgres-cursos@db-cursos:5432/postgres-cursos
    networks:
      - back-tier-cursos 

  #SERVICIO para crud de usuarios
  #en python
  #puerto 5002
  usuarios:
    build: 
      context: ./usuarios
    depends_on:
  #    - kafka
  #    - apigateway
      - db-usuarios
    healthcheck: 
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    ports:
      - "5002:82"
    environment:
      KAFKA_BROKER: kafka:9092
      DATABASE_URL: postgresql://postgres-usuarios:postgres-usuarios@db-usuarios:5432/postgres-usuarios
    networks:
      - back-tier-usuarios

  #BD de Usuarios en PostgreSQL
  db-usuarios:
    container_name: db-usuarios
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: "postgres-usuarios"
      POSTGRES_USER: "postgres-usuarios"
      POSTGRES_PASSWORD: "postgres-usuarios"
    volumes:
      - "db-data-usuarios:/var/lib/postgresql/data"
      - "./healthchecks:/healthchecks"
    ports:
      - "5432:5432"
    healthcheck:
      test: /healthchecks/postgres.sh
      interval: "5s"
    networks:
      - back-tier-usuarios

  #BD de Cursos en PostgreSQL
  db-cursos:
    container_name: db-cursos
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: "postgres-cursos"
      POSTGRES_USER: "postgres-cursos"
      POSTGRES_PASSWORD: "postgres-cursos"
    volumes:
      - "db-data-cursos:/var/lib/postgresql/data"
      - "./healthchecks:/healthchecks"
    ports:
      - "5433:5432"
    healthcheck:
      test: /healthchecks/postgres.sh
      interval: "5s"
    networks:
      - back-tier-cursos
  
  #redis-collect:
  #  image: redis:alpine
  #  volumes:
  #    - "./healthchecks:/healthchecks"
  #  ports:
  #    - "6379:6379"
  #  healthcheck:
  #    test: /healthchecks/redis.sh
  #    interval: "5s"
  #  networks:
  #    - back-process

  #redis-process:
  #  image: redis:alpine
  #  volumes:
  #    - "./healthchecks:/healthchecks"
  #  ports:
  #    - "6380:6379"
  #  healthcheck:
  #    test: /healthchecks/redis.sh
  #    interval: "5s"
  #  networks:
  #    - back-process

volumes:
  #exclude:
  db-data-cursos:
  db-data-usuarios:

networks:
#  frontend:
  back-tier-usuarios:
  back-tier-cursos:
  #back-process:
